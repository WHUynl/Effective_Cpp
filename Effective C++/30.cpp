//透彻了解inlining的里里外外
/*
inline隐喻方式是将函数定义于class定义式内（包括friend）

部分编译器拒绝将太过复杂（例如带有循环或递归）的函数 inlining.
而所有对 virtual 函数的调用（除非是最平淡无奇的）也都会使 inlining 落空。
因为virtual意味”等待，直到运行期才确定调用哪个函数”，而inline意味“执行前，先将调用动作替换为被调用函数的本体”。

构造函数和析构函数使用inline一般都是糟糕的决定
因为编译器会对默认函数进行处理，而是用inline则会破坏这种处理。
*/

/*
总结
1.将大多数 inlining 限制在小型、被频繁调用的函数身上。这可使日后的调试过程和二进制升级 ( binary upgradability )更容易，也可使潜在的代码膨胀问题最小化，使程序的速度提升机会最大化。
2.不要只因为 function templates 出现在头文件，就将它们声明为inline。

*/